
//#include<stdlib>
#include<iostream>
#include<string>
#include<fstream>
#include<CImg.h>

#define MAINPROGRAM
#include "variables.h"
#include "readfile.h"

void createimage(float* color)
{ std::cout<<"inside create image"<<std::endl;

    std::ofstream filestream;
    unsigned int imagesize=width*height;
    filestream.open("outputimage.ppm",std::ios::binary|std::ios::out);
filestream<<"P6"<<"\n"<<width<<"\n"<<height<<"\n"<<maxcolorvalues<<"\n";
unsigned char * imagebuffer = new unsigned char[imagesize*3];
    for(int y=0;y<height;y++)
        for(int x=0;x<width;x++)
        for(int rgb=0;rgb<3;rgb++)
        imagebuffer[y*width*3+x*3+rgb]=(char)(255*color[y*width*3+x*3+rgb]);

filestream.write((char*)imagebuffer,imagesize*3);


}

Ray computeray(const vec3f& eye,const float& fovy,int x, int y)
{
    float fradian =(3.14159*(fovy/2))/180;
float alpha,beta,ww=width/2,hh=height/2;
alpha=((x-ww)/ww)*(tan(fradian));
beta=((hh-y)/hh)*(tan(fradian))*(width/height);
vec3f u,v,w,temp,eyedirection,canu,canv,canw;
canu=canonicalu;
canv=canonicalv;
canw=canonicalw;
u=canu*alpha;
v=canv*beta;
w=canw*(-1);
temp=u+v;
eyedirection=temp+w;
eyedirection.normalize();
Ray ray;
ray={eyedirection,eye,'V'};
return ray;
}

bool isect(const Ray& ray,const object& obj,double& t0,double& t1)
{
    vec3f eminusc,rayp,rayd,cntr;
    rayp=ray.rayposition;
    rayd=ray.raydirection;
    cntr=obj.center;
    eminusc=rayp-cntr;
    float deminusc=dot(rayd,eminusc);
    float dd=dot(rayd,rayd);
    float eminusc2=dot(eminusc,eminusc);
    float radius=obj.size;

        float determinant=(deminusc*deminusc)-(dd)*(eminusc2-(radius*radius));
        if(determinant<0)
            return false;
        else {
            t0=(-deminusc+sqrt(determinant))/dd;
        t1=(-deminusc-sqrt(determinant))/dd;
        }

    if(t0<t1 && t0>0) {
    return true;}
    else if(t1<t0 && t1>0)
    {
                t0=t1;
        return true;
    }
else if(t1==t0 && t1>0)
        return true;
   else return false;


}

float getcolor(int rgb, object& obj)
{
    return (obj.diffuse)[rgb];
}

void raytracer()
{
    unsigned char* imagebuffer=new unsigned char[width*height];
    double t0,t1;
    float color[3*width*height];
    for (int y=0;y<height;y++){
        for(int x=0;x<width;x++)
        {Ray visibilityray=computeray(eyeposition,fovy,x,y);

        bool hit=isect(visibilityray, objects[0],t0,t1);
        for(int rgb=0;rgb<3;rgb++){
if(hit)
 {

   color[y*width*3+x*3+rgb] =getcolor(rgb,objects[0]);
}
else color[y*width*3+x*3+rgb] =0.0;
        }}}

        createimage(&color[0]);

}
int main(int argc, char** argv)
{

    readfile(argv[1]);
    raytracer();
        return 0;
}





